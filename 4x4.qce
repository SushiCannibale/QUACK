// Programming Quantum Computers
//   by Eric Johnston, Nic Harrigan and Mercedes Gimeno-Segovia
//   O'Reilly Media

// To run this online, go to http://oreilly-qc.github.io?p=2-1

// This sample generates a single random bit.

var num_qubits = 16;
qc.reset(num_qubits);

var c00 = qint.new(1, 'Case 00');
var c01 = qint.new(1, 'Case 01');
var c10 = qint.new(1, 'Case 10');
var c11 = qint.new(1, 'Case 11');

// Il s'agit de la case cible. Soit une sous-grille, soit la clé
var col_target = qint.new(1, 'Col. Target');
var row_target = qint.new(1, 'Row Target');

var col_grid = qint.new(1, 'Col. Grid');
var row_grid = qint.new(1, 'Row Grid');

var col_coin = qint.new(1, 'Col. Coin');
var row_coin = qint.new(1, 'Row Coin');

var col_bob = qint.new(1, 'Col. Bob');
var row_bob = qint.new(1, 'Row Bob');

var target_col_proof = qint.new(1, 'Target Col Proof');
var target_row_proof = qint.new(1, 'Target Row Proof');
var grid_col_proof = qint.new(1, 'Grid Col Proof');
var grid_row_proof = qint.new(1, 'Grid Row Proof');

qc.label('Prépare');
qc.write(0, 0b1111111111111111);
qc.hadamard(0b1111);
qc.hadamard(0b110000);

// Ici, col_grid & row_grid donnent la position de la subgrid où se trouve la clé.
// Il s'agit du premier coin que l'on doit flip et il est à la position 11XY
// où X est donné par row_grid et Y par col_grid.
qc.label('Parité Target (Grid)' );
col_grid.cnot(c01);
col_grid.cnot(c11);
row_grid.cnot(c10);
row_grid.cnot(c11);

col_grid.cnot(col_target);
row_grid.cnot(row_target);

qc.label('Flip coin (bottom right)')
// 1 & 1
qc.cnot(0b1000, 0b11000000);
// 1 & 0
col_grid.not();
qc.cnot(0b100, 0b11000000);
col_grid.not();
// 0 & 1
row_grid.not();
qc.cnot(0b10, 0b11000000);
row_grid.not();
// 0 & 0
qc.not(0b11000000);
qc.cnot(0b1, 0b11000000);
qc.not(0b11000000);

/// PREUVE MI-PARCOURS
target_col_proof.cnot(col_target);
target_row_proof.cnot(row_target);
grid_col_proof.cnot(c01);
grid_col_proof.cnot(c11);
grid_row_proof.cnot(c10);
grid_row_proof.cnot(c11);

target_col_proof.read()
target_row_proof.read()
grid_col_proof.read()
grid_row_proof.read()
/// FIN PREUVE MI-PARCOURS

qc.label('Prépare');
qc.hadamard(0b1111);
// Cette fois, col_target & row_target représentent la position de la clé, car 
// l'on est en fin de récursion.
qc.hadamard(0b110000);

// On s'attaque à la pièce posée en 00XY où X est donné par row_coin et Y 
// par col_coin.
qc.label('Parité Target (Coin)' );
col_coin.cnot(c01);
col_coin.cnot(c11);
row_coin.cnot(c10);
row_coin.cnot(c11);

col_coin.cnot(col_target);
row_coin.cnot(row_target);

qc.label('Flip coin (top left)')
// 1 & 1
qc.cnot(0b1000, 0b1100000000);
// 1 & 0
col_coin.not();
qc.cnot(0b100, 0b1100000000);
col_coin.not();
// 0 & 1
row_coin.not();
qc.cnot(0b10, 0b1100000000);
row_coin.not();
// 0 & 0
qc.not(0b1100000000);
qc.cnot(0b1, 0b1100000000);
qc.not(0b1100000000);

qc.label('Bob reads');
col_bob.cnot(c01);
col_bob.cnot(c11);
row_bob.cnot(c10);
row_bob.cnot(c11);

col_target.read();
row_target.read();
col_bob.read();
row_bob.read();
